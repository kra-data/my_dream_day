version: "3.9"
services:
  postgres:
    image: postgres:16-alpine
    container_name: employee_postgres
    ports:
      - "127.0.0.1:5432:5432"
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 10s
    restart: unless-stopped
    networks: [mdd_net]
  backend:
    build: .
    container_name: employee_backend
    env_file:
      - ./.env
    environment:
      PORT: 3001
      ASSETS_DIR: /app/assets
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    networks: [mdd_net]
  spring-api:
      image: jifrozen0110/attendance-spring:prod
      container_name: spring-api
      environment:
        SPRING_PROFILES_ACTIVE: stage
        # DB는 compose 네트워크에서 서비스명으로 접근
        SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${DB_NAME}?currentSchema=mdd_v2
        SPRING_DATASOURCE_USERNAME: ${DB_USER}
        SPRING_DATASOURCE_PASSWORD: ${DB_PASS}
        # (권장) Dialect 명시해두면 연결 실패 시에도 에러로그가 깔끔
        SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
        # 필요시 JPA 설정
        # SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      depends_on:
        postgres:
          condition: service_healthy
      healthcheck:
        test: ["CMD", "wget", "-qO-", "http://localhost:8080/api/actuator/health"]
        interval: 10s
        timeout: 3s
        retries: 10
        start_period: 20s
      restart: unless-stopped
      env_file:
        - ./.env
      expose:
        - "8080"    # 내부에서만 사용 (Caddy가 붙음)
      networks: [mdd_net]
  caddy:
    image: caddy:2-alpine
    container_name: employee_caddy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - backend
    networks: [mdd_net]
    restart: unless-stopped
  spring-api-stage:
    image: jifrozen0110/attendance-spring:stage
    container_name: spring-api-stage
    env_file:
      - ./.env.stage
    environment:
      SPRING_PROFILES_ACTIVE: stage
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8080/api/actuator/health || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 20s
    expose:
      - "8080"
    restart: unless-stopped
    networks: [mdd_net]


volumes:
  pg_data:
  caddy_data:
  caddy_config:

networks:
  mdd_net:
    external: true