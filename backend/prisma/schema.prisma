generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // 반드시 mdd_v2 스키마로!
  url      = env("DATABASE_URL") // postgresql://.../?schema=mdd_v2
}

/**
 * ============= users =============
 */
model User {
  id                    BigInt    @id @default(autoincrement())
  loginId               String    @map("login_id")
  passwordHash          String?   @map("password_hash")
  name                  String?
  phone                 String?   @unique
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt             DateTime  @default(now()) @map("updated_at") @db.Timestamptz
  socialOnly            Boolean   @default(false) @map("social_only")
  role                  String?
  requirePasswordChange Boolean   @default(false) @map("require_password_change")
  passwordMigratedAt    DateTime? @map("password_migrated_at") @db.Timestamptz

  // 1:N (User 1) <- (Shop N)
  shops Shop[] @relation("OwnerToShops")

  @@map("users")
}

/**
 * ============= shops =============
 */
model Shop {
  id          BigInt   @id @default(autoincrement())
  name        String
  ownerUserId BigInt   @map("owner_user_id")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamptz
  hourlyWage  Int?     @map("hourly_wage")
  payday      Int?
  qrSecret    String   @map("qr_secret")

  owner User @relation("OwnerToShops", fields: [ownerUserId], references: [id])

  employees          EmployeeMember[]
  workShifts         WorkShift[]
  payrollSettlements PayrollSettlement[] @relation("ShopToSettlements")

  @@unique([ownerUserId, name], name: "uq_shops_owner_name")
  @@map("shops")
}

/**
 * ============= employee_members =============
 */
model EmployeeMember {
  id                    BigInt    @id @default(autoincrement())
  shopId                BigInt    @map("shop_id")
  name                  String
  phone                 String
  passwordHash          String    @map("password_hash") // DB NOT NULL
  nationalIdEnc         String?   @map("national_id_enc")
  nationalIdHash        String?   @map("national_id_hash")
  nationalIdMasked      String?   @map("national_id_masked")
  bankName              String?   @map("bank_name")
  bankAccount           String?   @map("bank_account")
  active                Boolean   @default(true)
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt             DateTime  @default(now()) @map("updated_at") @db.Timestamptz
  position              String?
  section               String?
  pay                   Decimal   @db.Decimal(12, 2)
  payUnit               String    @map("pay_unit")
  shopRole              String    @default("EMPLOYEE") @map("shop_role")
  requirePasswordChange Boolean   @default(false) @map("require_password_change")
  passwordMigratedAt    DateTime? @map("password_migrated_at") @db.Timestamptz

  shop               Shop                @relation(fields: [shopId], references: [id])
  workShifts         WorkShift[]
  payrollSettlements PayrollSettlement[] @relation("EmpToSettlements")

  @@unique([shopId, name, phone], name: "uq_emp_member_shop_name_phone")
  @@map("employee_members")
}

/**
 * ============= work_shifts =============
 */
model WorkShift {
  id                  BigInt    @id @default(autoincrement())
  shopId              BigInt    @map("shop_id")
  employeeId          BigInt    @map("employee_id")
  startAt             DateTime  @map("start_at") @db.Timestamptz
  endAt               DateTime? @map("end_at") @db.Timestamptz
  actualInAt          DateTime? @map("actual_in_at") @db.Timestamptz
  actualOutAt         DateTime? @map("actual_out_at") @db.Timestamptz
  late                Boolean?  @default(false) // DB DEFAULT false
  earlyOut            Boolean?  @default(false) @map("early_out")
  extended            Boolean?  @default(false)
  settlementId        BigInt?   @map("settlement_id")
  workedMinutes       Int?      @map("worked_minutes") // ★ 기존 컬럼과 매핑 (DROP 방지)
  status              String    @default("SCHEDULED")
  reviewReason        String?   @map("review_reason")
  reviewResolvedAt    DateTime? @map("review_resolved_at") @db.Timestamptz
  reviewedBy          BigInt?   @map("reviewed_by")
  finalPayAmount      Int?      @map("final_pay_amount")
  isSettled           Boolean   @default(false) @map("is_settled")
  memo                String?
  adminChecked        Boolean   @default(false) @map("admin_checked")
  createdByUserId     BigInt?   @map("created_by_user_id")
  createdByEmployeeId BigInt?   @map("created_by_employee_id")
  updatedByUserId     BigInt?   @map("updated_by_user_id")
  updatedByEmployeeId BigInt?   @map("updated_by_employee_id")
  createdAt           DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt           DateTime  @default(now()) @map("updated_at") @db.Timestamptz

  shop       Shop               @relation(fields: [shopId], references: [id])
  employee   EmployeeMember     @relation(fields: [employeeId], references: [id])
  settlement PayrollSettlement? @relation("SettlementToShifts", fields: [settlementId], references: [id])

  @@map("work_shifts")
}

/**
 * ============= payroll_settlements =============
 */
model PayrollSettlement {
  id             BigInt   @id @default(autoincrement())
  shopId         BigInt   @map("shop_id")
  employeeId     BigInt   @map("employee_id")
  cycleStart     DateTime @map("cycle_start") @db.Timestamptz
  cycleEnd       DateTime @map("cycle_end") @db.Timestamptz
  workedMinutes  Int      @map("worked_minutes")
  basePay        Int      @map("base_pay")
  totalPay       Int      @map("total_pay")
  settledAt      DateTime @map("settled_at") @db.Timestamptz
  processedBy    BigInt?  @map("processed_by")
  note           String?
  incomeTax      Int      @default(0) @map("income_tax")
  localIncomeTax Int      @default(0) @map("local_income_tax")
  netPay         Int      @default(0) @map("net_pay")
  otherTax       Int      @default(0) @map("other_tax")

  shop       Shop           @relation("ShopToSettlements", fields: [shopId], references: [id])
  employee   EmployeeMember @relation("EmpToSettlements", fields: [employeeId], references: [id])
  workShifts WorkShift[]    @relation("SettlementToShifts")

  @@map("payroll_settlements")
}
