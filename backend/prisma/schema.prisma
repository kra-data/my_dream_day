generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Shop {
  id                 Int                 @id @default(autoincrement())
  name               String
  hourlyWage         Int
  payday             Int
  qrSecret           String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  employees          Employee[]
  payrollSettlements PayrollSettlement[]
  workShifts         WorkShift[]
}

model Employee {
  id                   Int                 @id @default(autoincrement())
  shopId               Int
  name                 String
  accountNumber        String
  phone                String
  schedule             Json
  role                 String              @default("employee")
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  bank                 String              @default("")
  position             Position            @default(STAFF)
  section              Section             @default(HALL)
  pay                  Int
  payUnit              PayUnit
  nationalIdEnc        String?
  nationalIdHash       String?             @db.VarChar(64)
  nationalIdMasked     String?             @db.VarChar(32)
  personalColor        String?             @default("#1F6FEB") @db.VarChar(7)
  shop                 Shop                @relation(fields: [shopId], references: [id], onDelete: Cascade)
  payrollSettlements   PayrollSettlement[] @relation("SettlementEmployee")
  processedSettlements PayrollSettlement[] @relation("SettlementProcessedBy")
  workShifts           WorkShift[]

  @@index([nationalIdHash], map: "idx_employee_nationalIdHash")
}

model WorkShift {
  id               Int                @id @default(autoincrement())
  shopId           Int
  employeeId       Int
  startAt          DateTime
  endAt            DateTime?
  actualInAt       DateTime?
  actualOutAt      DateTime?
  late             Boolean?           @default(false)
  leftEarly        Boolean?           @default(false)
  createdAt        DateTime           @default(now())
  createdBy        Int?
  updatedAt        DateTime           @updatedAt
  updatedBy        Int?
  actualMinutes    Int?
  settlementId     Int?
  workedMinutes    Int?
  status           WorkShiftStatus    @default(SCHEDULED)
  reviewReason     ShiftReviewReason?
  reviewResolvedAt DateTime?
  reviewedBy       Int?
  finalPayAmount   Int?
  isSettled        Boolean            @default(false)
  memo             String?
  adminChecked     Boolean            @default(false)
  employee         Employee           @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  settlement       PayrollSettlement? @relation(fields: [settlementId], references: [id])
  shop             Shop               @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId, employeeId, startAt])
  @@index([employeeId, status])
  @@index([settlementId])
  @@index([shopId, employeeId, isSettled])
}

model PayrollSettlement {
  id              Int         @id @default(autoincrement())
  shopId          Int
  employeeId      Int
  cycleStart      DateTime
  cycleEnd        DateTime
  workedMinutes   Int
  basePay         Int
  totalPay        Int
  settledAt       DateTime    @default(now())
  processedBy     Int?
  note            String?
  incomeTax       Int         @default(0)
  localIncomeTax  Int         @default(0)
  netPay          Int         @default(0)
  otherTax        Int         @default(0)
  employee        Employee    @relation("SettlementEmployee", fields: [employeeId], references: [id])
  processedByUser Employee?   @relation("SettlementProcessedBy", fields: [processedBy], references: [id])
  shop            Shop        @relation(fields: [shopId], references: [id])
  workShifts      WorkShift[]

  @@unique([employeeId, cycleStart, cycleEnd])
  @@index([shopId])
  @@index([shopId, cycleStart, cycleEnd])
  @@index([employeeId, cycleStart, cycleEnd])
}

enum Position {
  OWNER
  MANAGER
  STAFF
  PART_TIME
}

enum Section {
  HALL
  KITCHEN
}

enum PayUnit {
  MONTHLY
  HOURLY
}

enum ShiftReviewReason {
  LATE_IN
  EARLY_OUT
  LATE_OUT
  EXTENDED
  NO_ATTENDANCE
}

enum WorkShiftStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELED
  REVIEW
}
