// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Position {
  OWNER // 점주·사장
  MANAGER // 매니저
  STAFF // 직원
  PART_TIME // 알바
}

enum Section {
  HALL // 홀
  KITCHEN // 주방
}

enum PayUnit {
  MONTHLY // 월급제
  HOURLY // 시급제
}

enum ShiftReviewReason {
  LATE_IN // 시작 +10분 초과 지각 → REVIEW
  EARLY_OUT // 종료 -10분 이내 조퇴 → REVIEW
  LATE_OUT // 종료 초과 퇴근 (연장근무 수정 시 REVIEW로 전환)
  EXTENDED // 근로자/관리자가 근무일정을 연장 수정함
}

enum WorkShiftStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELED
  MISSED
  OVERDUE
  REVIEW
}

model Shop {
  id         Int      @id @default(autoincrement())
  name       String
  hourlyWage Int
  payday     Int
  qrSecret   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  employees          Employee[]
  payrollSettlements PayrollSettlement[]
  // 🔹 추가
  workShifts         WorkShift[]
}

model Employee {
  id            Int      @id @default(autoincrement())
  shopId        Int
  name          String
  accountNumber String
  bank          String   @default("")
  phone         String
  schedule      Json
  position      Position @default(STAFF)
  section       Section  @default(HALL)
  pay           Int
  payUnit       PayUnit
  role          String   @default("employee")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  shop                 Shop                @relation(fields: [shopId], references: [id], onDelete: Cascade)
  payrollSettlements   PayrollSettlement[] @relation("SettlementEmployee")
  processedSettlements PayrollSettlement[] @relation("SettlementProcessedBy")

  // 🔹 신규 컬럼(처음엔 전부 NULL 허용)
  nationalIdEnc    String? @db.Text
  nationalIdHash   String? @db.VarChar(64)
  nationalIdMasked String? @db.VarChar(32)

  // 🔹 추가
  workShifts WorkShift[]

  @@index([nationalIdHash], name: "idx_employee_nationalIdHash") // 우선 일반 인덱스
}

model WorkShift {
  id         Int @id @default(autoincrement())
  shopId     Int
  employeeId Int

  // 계획
  startAt DateTime
  endAt   DateTime
  status  WorkShiftStatus @default(SCHEDULED)

  // 실적
  actualInAt  DateTime?
  actualOutAt DateTime?
  late        Boolean?  @default(false)
  leftEarly   Boolean?  @default(false)

  // 정산 스냅샷용
  workedMinutes Int? // payable(시프트 교집합)
  actualMinutes Int? // 실제 근무 분
  settlementId  Int?
  settlement    PayrollSettlement? @relation(fields: [settlementId], references: [id])

  // ✅ 리뷰/알림/메모
  needsReview      Boolean            @default(false)
  reviewReason     ShiftReviewReason?
  reviewNote       String?
  reviewResolvedAt DateTime?
  reviewedBy       Int?

  shop     Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdBy Int?
  updatedBy Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([shopId, employeeId, startAt])
  @@index([employeeId, status])
  @@index([settlementId])
}

model PayrollSettlement {
  id            Int      @id @default(autoincrement())
  shopId        Int
  employeeId    Int
  cycleStart    DateTime @db.Timestamp(3)
  cycleEnd      DateTime @db.Timestamp(3)
  workedMinutes Int
  basePay       Int
  totalPay      Int
  settledAt     DateTime @default(now())
  processedBy   Int?
  note          String?

  shop            Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)
  employee        Employee  @relation("SettlementEmployee", fields: [employeeId], references: [id], onDelete: Cascade)
  processedByUser Employee? @relation("SettlementProcessedBy", fields: [processedBy], references: [id], onDelete: SetNull)

  workShifts WorkShift[]

  @@unique([employeeId, cycleStart, cycleEnd])
  @@index([shopId])
}
