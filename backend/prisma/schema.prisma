// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Position {
  OWNER // 점주·사장
  MANAGER // 매니저
  STAFF // 직원
  PART_TIME // 알바
}

enum Section {
  HALL // 홀
  KITCHEN // 주방
}

enum PayUnit {
  MONTHLY // 월급제
  HOURLY // 시급제
}

model Shop {
  id                 Int                 @id @default(autoincrement())
  name               String
  hourlyWage         Int
  payday             Int
  qrSecret           String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  employees          Employee[]
  attendanceRecords  AttendanceRecord[]  @relation("ShopAttendance")
  payrollSettlements PayrollSettlement[]
}

model Employee {
  id            Int      @id @default(autoincrement())
  shopId        Int
  name          String
  nationalId    String   @unique
  accountNumber String
  bank          String   @default("")
  phone         String
  schedule      Json
  position      Position @default(STAFF)
  section       Section  @default(HALL)
  pay           Int // 실제 금액(원 단위)
  payUnit       PayUnit // MONTHLY 또는 HOURLY
  role          String   @default("employee")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  shop                 Shop                @relation(fields: [shopId], references: [id], onDelete: Cascade)
  attendanceRecords    AttendanceRecord[]  @relation("EmployeeAttendance")
  // 직원 자신의 정산들
  payrollSettlements   PayrollSettlement[] @relation("SettlementEmployee")
  // 관리자로서 처리한 정산들
  processedSettlements PayrollSettlement[] @relation("SettlementProcessedBy")
}

model AttendanceRecord {
  id            Int       @id @default(autoincrement())
  shopId        Int
  employeeId    Int
  type          String // "IN" | "OUT"
  clockInAt     DateTime? // 🔹 출근 시각
  clockOutAt    DateTime? // 🔹 퇴근 시각
  workedMinutes Int? // OUT 시 계산
  extraMinutes  Int? // OUT 시 계산
  paired        Boolean   @default(false) // IN ↔ OUT 짝지음 여부
  employee      Employee  @relation("EmployeeAttendance", fields: [employeeId], references: [id], onDelete: Cascade)
  shop          Shop      @relation("ShopAttendance", fields: [shopId], references: [id], onDelete: Cascade)
}

model PayrollSettlement {
  id            Int      @id @default(autoincrement())
  shopId        Int
  employeeId    Int
  cycleStart    DateTime @db.Timestamp(3)
  cycleEnd      DateTime @db.Timestamp(3)
  workedMinutes Int
  basePay       Int
  totalPay      Int
  settledAt     DateTime @default(now())
  processedBy   Int?
  note          String?

  // 관계들
  shop            Shop      @relation(fields: [shopId], references: [id])
  employee        Employee  @relation("SettlementEmployee", fields: [employeeId], references: [id])
  processedByUser Employee? @relation("SettlementProcessedBy", fields: [processedBy], references: [id], onDelete: SetNull)

  @@unique([employeeId, cycleStart, cycleEnd])
  @@index([shopId])
}
