// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Position {
  OWNER // 점주·사장
  MANAGER // 매니저
  STAFF // 직원
  PART_TIME // 알바
}

enum Section {
  HALL // 홀
  KITCHEN // 주방
}

enum PayUnit {
  MONTHLY // 월급제
  HOURLY // 시급제
}
model Shop {
  id                 Int                 @id @default(autoincrement())
  name               String
  hourlyWage         Int
  payday             Int
  qrSecret           String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  employees          Employee[]
  attendanceRecords  AttendanceRecord[]  @relation("ShopAttendance")
  payrollSettlements PayrollSettlement[]
  // 🔹 추가
  workShifts         WorkShift[]
}

model Employee {
  id            Int      @id @default(autoincrement())
  shopId        Int
  name          String
  accountNumber String
  bank          String   @default("")
  phone         String
  schedule      Json
  position      Position @default(STAFF)
  section       Section  @default(HALL)
  pay           Int
  payUnit       PayUnit
  role          String   @default("employee")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  shop                 Shop                @relation(fields: [shopId], references: [id], onDelete: Cascade)
  attendanceRecords    AttendanceRecord[]  @relation("EmployeeAttendance")
  payrollSettlements   PayrollSettlement[] @relation("SettlementEmployee")
  processedSettlements PayrollSettlement[] @relation("SettlementProcessedBy")

    // 🔹 신규 컬럼(처음엔 전부 NULL 허용)
  nationalIdEnc    String?  @db.Text
  nationalIdHash   String?  @db.VarChar(64)
  nationalIdMasked String?  @db.VarChar(32)


  // 🔹 추가
  workShifts           WorkShift[]


  @@index([nationalIdHash], name: "idx_employee_nationalIdHash") // 우선 일반 인덱스
}

model AttendanceRecord {
  id            Int       @id @default(autoincrement())
  shopId        Int
  employeeId    Int
  type          String
  clockInAt     DateTime?
  clockOutAt    DateTime?
  workedMinutes Int?
  extraMinutes  Int?
  paired        Boolean   @default(false)

  employee      Employee  @relation("EmployeeAttendance", fields: [employeeId], references: [id], onDelete: Cascade)
  shop          Shop      @relation("ShopAttendance", fields: [shopId], references: [id], onDelete: Cascade)

  shiftId       Int?
  shift         WorkShift? @relation(fields: [shiftId], references: [id])

  // 이미 있는 정산 연결(있다면 유지)
  settlementId  Int?
  settlement    PayrollSettlement? @relation(fields: [settlementId], references: [id])

  @@index([employeeId, clockInAt])
  @@index([shiftId])
  @@index([settlementId])
}

// 🔹 신규 테이블: 스케줄에서 생성되는 근무일정
model WorkShift {
  id            Int      @id @default(autoincrement())
  shopId        Int
  employeeId    Int
  startAt       DateTime  // 예정 시작 (KST 기준 UTC 시각)
  endAt         DateTime  // 예정 종료
  graceInMin    Int?      // 지각 유예 (분)
  status        String    @default("PLANNED") // PLANNED | IN_PROGRESS | COMPLETED | MISSED

  // 실측 기록(선택)
  actualInAt    DateTime?
  actualOutAt   DateTime?
  late          Boolean?  // 지각 여부
  leftEarly     Boolean?  // 조퇴 여부

  shop          Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)
  employee      Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  attendance    AttendanceRecord[]

  createdBy   Int?
  updatedBy   Int?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([shopId, employeeId, startAt])
  @@index([employeeId, startAt])
}


model PayrollSettlement {
  id            Int      @id @default(autoincrement())
  shopId        Int
  employeeId    Int
  cycleStart    DateTime @db.Timestamp(3)
  cycleEnd      DateTime @db.Timestamp(3)
  workedMinutes Int
  basePay       Int
  totalPay      Int
  settledAt     DateTime @default(now())
  processedBy   Int?
  note          String?

  shop            Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)
  employee        Employee  @relation("SettlementEmployee", fields: [employeeId], references: [id], onDelete: Cascade)
  processedByUser Employee? @relation("SettlementProcessedBy", fields: [processedBy], references: [id], onDelete: SetNull)

  // 🔽🔽 역관계: 정산에 묶인 근무 레코드들
  attendanceRecords AttendanceRecord[]

  @@unique([employeeId, cycleStart, cycleEnd])
  @@index([shopId])
}
